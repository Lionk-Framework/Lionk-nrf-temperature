name: Tag and Release

on:
  push:
    branches: ["main"]

permissions:
  contents: write
  discussions: write
  pull-requests: read

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      tag_created: ${{ steps.create_tag.outputs.tag_created }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      PREVIOUS_TAG: ${{ steps.get_latest_tag.outputs.PREVIOUS_TAG }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Retrieves the latest tag or defaults to the initial commit if no tags exist
          # For the release job, we use PREVIOUS_TAG to determine all commits between this reference point and HEAD
          # Using the repository's first commit as fallback ensures we capture the complete history when needed
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Get the current version
        id: get_version
        run: |
          VERSION_FILE="src/version.h"
          MAJOR=$(grep "#define VERSION_MAJOR" "$VERSION_FILE" | awk '{print $3}')
          MINOR=$(grep "#define VERSION_MINOR" "$VERSION_FILE" | awk '{print $3}')
          PATCH=$(grep "#define VERSION_PATCH" "$VERSION_FILE" | awk '{print $3}')
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create tag if new version
        if: ${{env.VERSION != env.PREVIOUS_TAG}}
        id: create_tag
        run: |
          git tag ${{env.VERSION}}
          git push origin ${{env.VERSION}}
          echo "tag_created=true" >> $GITHUB_OUTPUT

  release:
    needs: tag
    if: needs.tag.outputs.tag_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Debug Info
        run: |
          echo ${{ needs.tag.outputs.PREVIOUS_TAG }}
          echo ${{ needs.tag.outputs.VERSION }}
          echo ${{ needs.tag.outputs.tag_created }}
          echo ${{ needs.tag.outputs }}

      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get the list of commits since the last release
        id: commit_log
        run: |
          echo "$(git log ${{ needs.tag.outputs.PREVIOUS_TAG }}..@ --pretty=format:'- (%h) %s (%an)')" >> release.md

      # TODO grab build artifacts from latest build job and add them to the release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.tag.outputs.VERSION }}
          release_name: ${{ needs.tag.outputs.VERSION }}
          draft: false
          body_path: release.md
          prerelease: false 
